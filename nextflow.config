params {

//---------------------------------------------------------------------------------------------------------------------
//------------------                          Executables                          ------------------------------------
//---------------------------------------------------------------------------------------------------------------------

//Directory to nextflow executable.
nextflowDir = "/home/istanto2/project-aces/local_programs/nextflow/nextflow"

//Directory to cortex bin directory.
cortexBinDir = "/home/istanto2/project-aces/local_programs/cortex/bin"


//---------------------------------------------------------------------------------------------------------------------
//------------------                 Sample, Result, and Config Directory          ------------------------------------
//---------------------------------------------------------------------------------------------------------------------

//Where samples are located, the fastq file pairs.
sampleDir = ""

//Where the output will be dumped.
resultsDir = "/home/istanto2/project-aces/projects/cortex_var_runs/cortex_var_375_results"

//Where logs ware stored, default is in the resultsDir
logDir = resultsDir + "/logs"

//Where this GenomicsCortexVarNextflow folder is located (path/to/GenomicsCortexVarNextflow)
cloneDir = "/home/istanto2/project-aces/projects/cortex_var_runs/GenomicsCortextVarNextflow"

//---------------------------------------------------------------------------------------------------------------------
//------------------                          Sample Management                    ------------------------------------
//---------------------------------------------------------------------------------------------------------------------

//Please write the sample names according to its read files
//Example: if there are 2 samples, Sample_Magellan and Sample_Maverick, it should be written as ["Sample_Magellan", "Sample_Maverick"]
//This means in the sample directory given, there are files with Sample_Magellan.read1.fq and Sample_Magellan.read2.fq, and Sample_Maverick.read1.fq and Sample_Maverick.read2.fq.
sampleList

//This variable should be filled with how the samples are named. It is the string after the sample name, but before the read number.
//Example: for Sample_Magellan.read2.fq, sampleReadPattern should be ".read" because it is .read2.
//Another Example: Sample_Magellan_read2.fq, sampleReadPattern should be "_read" because it is _read2.
sampleReadPattern = "_read"

//This variable should be filled with the string after the read number, cortex supports both raw .fq and gzipped .fq.gz
//Example: for Sample_Magellan.read2.fq, the read number is "2", so the sampleReadExtension is ".fq".
sampleReadExtension = ".fq"

//Please provide a path to a text file containing paths of reference reads (such as .fna files) for each chromosome.
//on each separate lines, this is required for making reference graph and to do path divergence variant calling.
//Path Divergence requires one fasta per chromosome, which explains the need of this parameter
pathToReferenceList = "/home/istanto2/project-aces/projects/cortex_var_runs/reference_sampleLists/referenceSoybeanList"

//Sorts the sample list given
sampleList.sort()


//---------------------------------------------------------------------------------------------------------------------
//------------------                              Executor                      ------------------------------------
//---------------------------------------------------------------------------------------------------------------------

//Type of executor (Refer to https://www.nextflow.io/docs/latest/executor.html)
executor = "PBS"

//---------------------------------------------------------------------------------------------------------------------
//------------------           Cortex_var Process Parameters                     ------------------------------------
//---------------------------------------------------------------------------------------------------------------------

//kmer size for the de Bruijn graph
kmerSize = "63"

//Cortex_var Config
cortexConfig = "--kmer_size " + kmerSize + " --mem_height 27 --mem_width 20"

//------------------------------------------
//  Make sample de Bruijn graph parameters
//------------------------------------------

//Run make sample de Bruijn Graph? ("y"/"n")
runMakeSampleGraph = "n"

//Quality score threshold for making sample de Bruijn Graph
quality_score_threshold = 

//Executable (must be compiled/made first, refer to chapter 4 in user manual)
cortexBinMakeGraph = cortexBinDir + "/cortex_var_" + kmerSize + "_c1"

//Queue name in the cluster (if current node, put empty string '', refer to 'https://www.nextflow.io/docs/latest/executor.html')
makeGraphQueue = ""

//Maximum number of nodes to be used in parallel, refer to 'https://www.nextflow.io/docs/latest/process.html?highlight=maxforks#maxforks'
makeGraphMaxNodes = 

//Walltime (https://www.nextflow.io/docs/latest/process.html#process-time)
makeGraphWalltime = ""

//Cpus needed (number of cores) (https://www.nextflow.io/docs/latest/process.html#cpus)
makeGraphCpusNeeded = ""


//----------------------------------------------
//  Make cleaned pooled graph parameters
//----------------------------------------------

//Run make cleaned pooled graph? ("y"/"n") 
//Not recommended to run this step if coverage is high, refer to chapter 9.2 in cortex_var user manual
runMakePoolAndCleanError = "n"

//Executable (must be compiled/made first, refer to chapter 4 in user manual)
cortexBinPoolAndCleanError = cortexBinDir + "/cortex_var_" + kmerSize + "_c1"

//Queue name in the cluster (if current node, put empty string '', refer to 'https://www.nextflow.io/docs/latest/executor.html')
poolAndCleanErrorQueue = ""

//Maximum number of nodes to be used in parallel, refer to 'https://www.nextflow.io/docs/latest/process.html?highlight=maxforks#maxforks'
poolAndCleanErrorMaxNodes = 

//Walltime (https://www.nextflow.io/docs/latest/process.html#process-time)
poolAndCleanErrorWalltime = ""

//Cpus needed (number of cores) (https://www.nextflow.io/docs/latest/process.html#cpus)
poolAndCleanErrorCpusNeeded = ""


//----------------------------------------------
//  Clean sample graphs parameters
//----------------------------------------------

//Run clean sample graph? ("y"/"n") 
runCleanSampleGraph = "n"

//For high coverage cleaning, how stringent should the cleaning be? Refer to manual chapter 9.1, or/and supplementary methods 6
remove_low_coverage_supernodes = 

//Executable (must be compiled/made first, refer to chapter 4 in user manual)
cortexBinCleanGraphPerSampleHighCoverage = cortexBinDir + "/cortex_var_" + kmerSize + "_c1"
cortexBinCleanGraphPerSampleLowCoverage = cortexBinDir + "/cortex_var_" + kmerSize + "_c2"

//Queue name in the cluster (if current node, put empty string '', refer to 'https://www.nextflow.io/docs/latest/executor.html')
cleanGraphPerSampleQueue = ""

//Maximum number of nodes to be used in parallel, refer to 'https://www.nextflow.io/docs/latest/process.html?highlight=maxforks#maxforks'
cleanGraphPerSampleMaxNodes = 

//Walltime (https://www.nextflow.io/docs/latest/process.html#process-time)
cleanGraphPerSampleWalltime = ""

//Cpus needed (number of cores) (https://www.nextflow.io/docs/latest/process.html#cpus)
cleanGraphPerSampleCpusNeeded = ""

//----------------------------------------------
//       Make reference graph
//----------------------------------------------

//Run make reference graph? ("y"/"n") 
runMakeReferenceGraph = "n"

//Executable (must be compiled/made first, refer to chapter 4 in user manual)
cortexDirMakeReferenceGraph = cortexBinDir + "/cortex_var_" + kmerSize + "_c1"

//Queue name in the cluster (if current node, put empty string '', refer to 'https://www.nextflow.io/docs/latest/executor.html')
makeReferenceGraphQueue = ""

//Walltime (https://www.nextflow.io/docs/latest/process.html#process-time)
makeReferenceGraphWalltime = ""

//Cpus needed (number of cores) (https://www.nextflow.io/docs/latest/process.html#cpus)
makeReferenceGraphCpusNeeded = ""

//----------------------------------------------
//       Make combination graph
//----------------------------------------------

//Run make combination graph? ("y"/"n")
runMakeCombinationGraph = "n"

//Path to reference graph ctx file (default is path to where it would be made by makeReferencegraph)
pathToRefCtx = resultsDir + "/makeReferenceGraphOutput/ref.ctx"

//Please provide the largest number of colors of graph to run when making combination graph here
//This determines the number of color for cortex, being finalCombinationGraphMaxColor + 1
//Example: 
//finalCombinationGraphMaxColor = 3 would require the cortex executable to be cortexBinDir + "/cortex_var_" + kmerSize + "c4"
finalCombinationGraphMaxColor = 11 

//Executable (must be compiled/made first, refer to chapter 4 in user manual)
cortexDirMakeCombinationGraph = cortexBinDir + "/cortex_var_" + kmerSize + "_c" + finalCombinationGraphMaxColor

//Queue name in the cluster (if current node, put empty string '', refer to 'https://www.nextflow.io/docs/latest/executor.html')
makeCombinationGraphQueue = ""

//Maximum number of nodes to be used at once, refer to 'https://www.nextflow.io/docs/latest/process.html?highlight=maxforks#maxforks'
makeCombinationGraphMaxNodes = 

//Walltimes (https://www.nextflow.io/docs/latest/process.html#process-time)
makeCombinationGraphWalltime = ""

//Cpus needed (number of cores) (https://www.nextflow.io/docs/latest/process.html#cpus)
makeCombinationGraphCpusNeeded = ""

//----------------------------------------------
//       Variant Calling
//----------------------------------------------

//Run Variant Calling? ("y"/"n")
runVariantCalling = "y"

//Run Path Divergence? ("y"/"n")
PD = "y"

//Path Divergence Only ("y"/"n")
populationPD = "n"
individualPD = "y"

//Executable (must be compiled/made first, refer to chapter 4 in user manual)
cortexDirVariantCalling = cortexBinDir + "/cortex_var_" + kmerSize + "_c" + finalCombinationGraphMaxColor

//Queue name in the cluster (if current node, put empty string '', refer to 'https://www.nextflow.io/docs/latest/executor.html')
variantCallingQueue = "aces"

//Maximum number of nodes to be used at once, refer to 'https://www.nextflow.io/docs/latest/process.html?highlight=maxforks#maxforks'
variantCallingMaxNodes = 7

//Walltimes (https://www.nextflow.io/docs/latest/process.html#process-time)
variantCallingWalltime = "4h"

//Cpus needed (number of cores) (https://www.nextflow.io/docs/latest/process.html#cpus)
variantCallingCpusNeeded = "28"

//Error Strategy (https://www.nextflow.io/docs/latest/process.html#errorstrategy)
variantCallingErrorStrategy = "ignore"
//----------------------------------------------
//       Conversion to VCF
//----------------------------------------------

//Run Conversion to VCF? ("y"/"n")
runConversionToVCF = "n"

//Stampy Variables, refer to page 15 of cortex_var manual
stampyBin = ""
stampyHashProducts = ""

//VCFTools Directory
VCFToolsDir = ""

//Sample ploidy
samplePloidy = 

//Reference fasta file
referenceFasta = ""

//Queue name in the cluster (if current node, put empty string '', refer to 'https://www.nextflow.io/docs/latest/executor.html'
runConversionToVCFQueue = ""

//Maximum number of nodes to be used at once, refer to 'https://www.nextflow.io/docs/latest/process.html?highlight=maxforks#maxforks'
runConversionToVCFMaxNodes = 

//Walltimes (https://www.nextflow.io/docs/latest/process.html#process-time)
runConversionToVCFWalltime = ""

//Cpus needed (number of cores) (https://www.nextflow.io/docs/latest/process.html#cpus)
runConversionToVCFCpusNeeded = ""

}
