
// These are variables to be edited, depending on what the user wants


params {

//---------------------------------------------------------------------------------------------------------------------
//------------------                           Nextflow Directory                     ------------------------------------
//---------------------------------------------------------------------------------------------------------------------
//Directory to nextflow executable
nextflowDir = "/usr/local/apps/bioapps/nextflow/nextflow-0.30.1.4844/nextflow"


//---------------------------------------------------------------------------------------------------------------------
//------------------                           RUNNING OPTIONS                     ------------------------------------
//---------------------------------------------------------------------------------------------------------------------

//How many want to be run in parallel for making sample graph?
makeSampleGraphPartition = 1


//Run Variant Caller using path divergence / bubble caller / both ? ("y"/"n")

PD = "y" //Path Divegence

BC = "n" //Bubble Caller


//Make Ref DbGraph? ("y"/"n")
//If no reference de Bruijn graph has been made before, the response should be (y)
//If reference de Bruijn graph has been made before, the response should be (n) to optimize process, and directory
//to the graph should be made.

makeRefGraph = "y"

//If user chooses not to make reference graph, please provide the path to the reference binary (.ctx) file below, else leave emtpy (IMPORTANT)
pathToRefCtx = "/projects/bioinformatics/DaveStuff/Cortex_workflow_development/final_nextflow_testing/results/productsOfStep4/ref.ctx"


//---------------------------------------------------------------------------------------------------------------------
//------------------             SAMPLE DIRECTORIES and RELATED VARIABLES          ------------------------------------
//---------------------------------------------------------------------------------------------------------------------

//Where samples are located, the fastq file pairs
sampleDir = "/projects/bioinformatics/DaveStuff/Cortex_workflow_development/nextFlowUltimateFolder/smallerSamples/shortSamplesMagMavFqReads"

//Where this config folder is located (pwd on current diretory and add /nextflow.config)
//example: pwd results in "/ui/ncsa/istanto2/git_dev_folders/cortex_workflow_nextflow/cortex_Var_NF".
//so:
configDir = "/ui/ncsa/istanto2/git_dev_folders/GenomicsCortextVarNextflow/nextflow.config"

//Please write the sample names according to its read files
//Example: if there are 2 samples, Sample_Magellan and Sample_Maverick, it should be written as ["Sample_Magellan", "Sample_Maverick"]
//This means in the sample directory given, there are files with Sample_Magellan.read1.fq and Sample_Magellan.read2.fq, and Sample_Maverick.read1.fq and Sample_Maverick.read2.fq
sampleList = ["Sample_Magellan", "Sample_Maverick"]

//This variable should be filled with how the samples are named.
//Example: for Sample_Magellan.read2.fq, sampleReadPattern should be ".read" because it is .read2
//Another Example: Sample_Magellan_read2.fq, sampleReadPattern should be "_read" because it is _read2
sampleReadPattern = "_read"

//This variable should be filled with the extension of the sample
//Example: for Sample_Magellan.read2.fq, sampleReadExtension should be ".fq"
sampleReadExtension = ".fq"

//Where results will be dumped
resultsDir = "/ui/ncsa/istanto2/git_dev_folders/test_results"

//If user chooses to run step 4, please provide a path to a text file containing paths of reference reads (such as .fna files) for each chromosome
//on each separate lines
pathToReferenceList = "/projects/bioinformatics/DaveStuff/Cortex_workflow_development/nextFlowUltimateFolder/smallerSamples/shortSamplesMagMavFqReads/referenceSoybeanList"


//############################ DO NOT EDIT THIS PART #################################################################
//Where nextflow scripts are

//Where the logs are stored
logDir = resultsDir + "/logs"

//Sorts the sample list given
sampleList.sort()

//Finds number of sample given
numberOfSamples = sampleList.size()

//Total color for low coverage is numberOfSamples + 2 because: number of Samples + reference graph + pooled graph
totalColorLowCoverage = numberOfSamples + 2

//Total color for high coverage is numberOfSamples + 1 because: number of Samples + reference graph
totalColorHighCoverage = numberOfSamples + 1

//####################################################################################################################





//---------------------------------------------------------------------------------------------------------------------
//-------------------                CORTEX DIRECTORIES and VARIABLES             --------------------------------------
//---------------------------------------------------------------------------------------------------------------------

//Cortex bin directory
cortexBinDir = "/projects/bioinformatics/builds/CORTEX_release_v1.0.5.21_matt_k/bin"
kmerSize = "63"

//THESE EXECUTABLES/BINARIES HAVE TO BE MADE FIRST
//Make sample de Bruijn Graph
cortexBinMakeGraph = cortexBinDir + "/cortex_var_" + kmerSize + "_c1"

//Make pooled graph and clean errors
cortexBinPoolAndCleanError = cortexBinDir + "/cortex_var_" + kmerSize + "_c1"

//Clean graph per sample
cortexBinCleanGraphPerSampleLowCoverage = cortexBinDir + "/cortex_var_" + kmerSize + "_c" + numberOfSamples
cortexBinCleanGraphPerSampleHighCoverage = cortexBinDir + "/cortex_var_" + kmerSize + "_c1"

//Make reference graph
cortexDirMakeReferenceGraph = cortexBinDir + "/cortex_var_" + kmerSize + "_c1"

//Make combination graph
cortexDirMakeCombinationGraphLowCoverage = cortexBinDir + "/cortex_var_" + kmerSize + "_c" + totalColorLowCoverage
cortexDirMakeCombinationGraphHighCoverage = cortexBinDir + "/cortex_var_" + kmerSize + "_c" + totalColorHighCoverage

//Variant calling
cortexDirVariantCalling = cortexBinDir + "/cortex_var_63_c" + 2


//########################################################################################################################

//The cortex configuration for each step can be configured here
//Example: cortexConfigProcessName= "--kmer_size 63 --mem_height 25 --mem_width 75"

cortexConfigMakeGraph = "--kmer_size 63 --mem_height 25 --mem_width 75"
cortexConfigPoolAndCleanError = "--kmer_size 63 --mem_height 25 --mem_width 75"
cortexConfigCleanGraphPerSample = "--kmer_size 63 --mem_height 25 --mem_width 75"
cortexConfigMakeReferenceGraph = "--kmer_size 63 --mem_height 25 --mem_width 75"
cortexConfigMakeCombinationGraph = "--kmer_size 63 --mem_height 25 --mem_width 75"
cortexConfigVariantCalling = "--kmer_size 63 --mem_height 25 --mem_width 75"

//Quality score threshold can be configured here
quality_score_threshold = 5





//-----------------------------------------------------------------------------------------------------------------------
//--------------------           Type of executor, queue names, etc -----------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------

//Type of executor (PBS/SLURM/etc.)
executor = "PBS"

//THESE ARE ONLY FOR DEV PURPOSES ONLY, LATER CHANGE THIS ALL TO HIGH RAM
makeGraphQueue = "big_mem"
poolAndCleanErrorQueue = "big_mem"
cleanGraphPerErrorQueue = "big_mem"
makeReferenceGraphQueue = "big_mem"
makeCombinationGraphQueue = "big_mem"
variantCallingQueue = "big_mem"

//Maximum number of nodes to be used at once
makeGraphMaxNodes = 5
poolAndCleanErrorMaxNodes = 5
cleanGraphPerErrorMaxNodes = 5
makeCombinationGraphMaxNodes = 5
variantCallingMaxNodes = 5

//Walltimes
variantCallingWalltimes = 10h

wallTime = ''
cpusNeeded = ''

}


